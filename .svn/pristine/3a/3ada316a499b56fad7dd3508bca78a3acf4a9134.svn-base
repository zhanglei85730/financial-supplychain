import React from 'react';
import { Modal, Progress, Icon } from 'antd';
import PropTypes from 'prop-types';

let currentProgress = 0;
let allTotal = 0;
function PushEasModal({ dispatch }, context) {
  const handleOk = () => {
    // dispatch({ type: `${packageConst.modelNameSapce}/pushEasModalRedece`, payload: !context.pushEasModalVisible });
    dispatch({ type: "common/pushEasModalRedece", payload: !context.pushEasModalVisible });
  };
  const handleCancel = () => {
    dispatch({ type: "common/pushEasClearResponseRedece", payload: [] });
    dispatch({ type: "common/pushEasModalRedece", payload: !context.pushEasModalVisible });
  };
  // 当前推送 
  const lastMessage = context.pushEasResponse.length > 0 ? context.pushEasResponse[context.pushEasResponse.length - 1] : {};
  if (lastMessage.hasOwnProperty('type') && lastMessage.type === 'TOTAL_COUNT') {
    allTotal = lastMessage.allTotal;
  }
  if (lastMessage.hasOwnProperty('total') && lastMessage.total != null) {
    currentProgress = lastMessage.total / allTotal * 100;
  }
  const listData = context.pushEasResponse;
  const successColor = { color: '#1890ff' };
  const failColor = { color: '#f5222d' };
  const subError = { marginLeft: '20px' };
  return (
    <Modal
      title="推送到金蝶"
      visible={context.pushEasModalVisible}
      onOk={handleOk}
      onCancel={handleCancel}
      height={200}
    >
      <Progress percent={currentProgress} status="active" />
      {
        listData.map((item, index) => {
          const key = index;
          //处理的当前信
          // if (item.total !== null) {
          //   return <div style={successColor} key={key}> <Icon type="check-circle-o" />推送到：{item.total}</div>;
          // }          
          // 连接服务器成功
          if (item.hasOwnProperty('type') && item.type === 'CONNECT_SUCCESS' && item.hasOwnProperty('msg') && item.msg != null) {
            return <div style={successColor} key={key}> <Icon type="check-circle-o" /> {item.msg}</div>;
          }
          // 出错，输出msg
          if (item.hasOwnProperty('type') && item.type === 'TOTAL_PART_COUNT' && item.hasOwnProperty('msg') && item.msg != null) {
            try {
              const msgArr = JSON.parse(item.msg) ? JSON.parse(item.msg) : [];
              const rr = msgArr.map((item) => {
                return <div style={subError}>{item}</div>;
              });
              return (
                <div style={failColor} key={key}> <Icon type="close-circle-o" /> 当前推送进度：{item.total}条/{allTotal}条{rr}</div>
              );
            } catch (err) {
            }
          }
          if (item.hasOwnProperty('type') && item.type === "SUCCESS") {
            return <div style={successColor} key={key}> <Icon type="check-circle-o" /> 推送完成</div>;
          }
        })
      }
    </Modal>
  );
}
PushEasModal.contextTypes = {
  pushEasModalVisible: PropTypes.bool,
  pushEasResponse: PropTypes.array,
};
// const SearchFormWrapped = Form.create()(SearchForm);

export default PushEasModal;
