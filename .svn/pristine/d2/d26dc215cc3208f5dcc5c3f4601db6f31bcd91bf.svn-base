import React from 'react';
import { Table, Alert } from 'antd';
import { connect } from 'dva';
import PropTypes from 'prop-types';
import consts from '../../config/const.js';
import { changePagination, decimalTo4, decimalTo2, taxRateFormater } from '../../utils/util.js';
import packageConst from './packageConst.js';
import NestedTable from './NestedTable.js';

function DataTable({
  dispatch,
  list,
  loading,
  selectedRowKeysArr,
  total,
  queryParams,
}) {
  const tdWidth = { width: 80 };
  const columns = [
    {
      title: '单据日期',
      key: 'createDate',
      dataIndex: 'createDate',
      width: 160,
      // fixed: 'left',
    }, {
      title: '订单编号',
      key: 'purchaseOrderId',
      dataIndex: 'purchaseOrderId',
      width: 150,
      // fixed: 'left',
      render: (value, row, index) => {
        const obj = {
          children: value,
          props: {},
        };
        if (row.hasOwnProperty('rowSpan')) {
          obj.props.rowSpan = row.rowSpan;
        }
        return obj;
      },
    },
    // {
    //   title: '类型 ',
    //   className: 'vendorName',
    //   dataIndex: 'vendorName',
    //   key: 'vendorName',
    //   ...tdWidth100,
    //   render: (value, row, index) => {
    //     return consts.renderValue('采购订单', row, index);
    //   },
    // },
    {
      title: '法人主体',
      key: 'corporationName',
      dataIndex: 'corporationName',
      width: 200,
    }, {
      title: '供应商',
      key: 'supplierName',
      dataIndex: 'supplierName',
      width: 250,
    },
    // {
    //   title: 'UPC',
    //   key: 'upc',
    //   dataIndex: 'upc',
    //   width: 200,
    // },
    // {
    //   title: 'SKU',
    //   key: 'skuCode',
    //   dataIndex: 'skuCode',
    //   width: 150,
    // },
    // {
    //   title: 'SKU名称',
    //   key: 'skuName',
    //   dataIndex: 'skuName',
    //   width: 400,
    // },
    // {
    //   title: '计量单位',
    //   key: 'pcsUnit',
    //   dataIndex: 'pcsUnit',
    //   width: 100,
    //   render: consts.unitPcs,
    // },
    {
      title: '订货数量',
      key: 'totalQuantity',
      dataIndex: 'totalQuantity',
      width: 100,
    }, {
      title: '币别',
      key: 'currency',
      dataIndex: 'currency',
      ...tdWidth,
    }, {
      title: '汇率',
      key: 'exchangeRate',
      dataIndex: 'exchangeRate',
      ...tdWidth,
      render: decimalTo4,
    },
    {
      title: '税率',
      key: 'taxRate',
      dataIndex: 'taxRate',
      ...tdWidth,
      render: (value, row, index) => (taxRateFormater(value, row, index, false)),
    },
    {
      title: '金额',
      key: 'totalMoney',
      dataIndex: 'totalMoney',
      width: 110,
      render: decimalTo2,
    },
    {
      title: '税额',
      key: 'totalTaxMoney',
      dataIndex: 'totalTaxMoney',
      width: 130,
      render: decimalTo2,
    }, {
      title: '价税合计',
      key: 'taxMoneyTotal',
      dataIndex: 'taxMoneyTotal',
      width: 150,
      render: decimalTo2,
    }, {
      title: '金额(本位币)',
      key: 'totalMoneyCny',
      dataIndex: 'totalMoneyCny',
      width: 110,
      render: decimalTo2,
    }, {
      title: '税额(本位币)',
      key: 'totalTaxMoneyCny',
      dataIndex: 'totalTaxMoneyCny',
      width: 130,
      render: decimalTo2,
    }, {
      title: '价税合计(本位币)',
      key: 'totalTaxMoneyTotalCny',
      dataIndex: 'totalTaxMoneyTotalCny',
      width: 150,
      render: decimalTo2,
    }, {
      title: '付款方式',
      key: 'methodName',
      dataIndex: 'methodName',
      width: 200,
    }, {
      title: '交货日期',
      key: 'deliveryDate',
      dataIndex: 'deliveryDate',
      width: 100,
      render: consts.dateFormat,
    }, {
      title: '采购员',
      key: 'buyerName',
      dataIndex: 'buyerName',
      ...tdWidth,
    }, {
      title: '事业部',
      key: 'orgName',
      dataIndex: 'orgName',
      width: 150,
    }, {
      title: '单据状态',
      key: 'voucherStatus',
      dataIndex: 'voucherStatus',
      width: 100,
      render: consts.voucherStatusRender,
    }, {
      title: '推送金蝶时间',
      key: 'pushEasDate',
      dataIndex: 'voucherErrorMessage',
      width: 200,
    }, {
      title: '金蝶生成凭证错误描述',
      key: 'voucherErrorMessage',
      dataIndex: 'voucherErrorMessage',
      width: 300,
    }];


  const onSelectChange = (selectedRowKeys, selectedRows) => {
    dispatch({ type: 'purchaseOrders/selectedRowKeys', payload: selectedRowKeys });
    dispatch({ type: 'purchaseOrders/selectedRows', payload: selectedRows });
  };
  const rowSelection = {
    selectedRowKeys: selectedRowKeysArr,
    onChange: onSelectChange,
    getCheckboxProps: record => ({
      disabled: record.createDate === '本页合计' || record.createDate === '全部合计',
      name: record.name,
    }),
  };
  const changePaginationHandle = (page, pageSize) => {
    changePagination(page, pageSize, dispatch, `${packageConst.modelNameSapce}`, queryParams);
  };
  const pageSizeChangeHandle = (current, size) => {
    // dispatch({ type: `${packageConst.modelNameSapce}/tableData`, payload: { offset: 0, limit: size } });
    changePagination(current, size, dispatch, `${packageConst.modelNameSapce}`, queryParams);
  };
  return (
    <div>
      <Alert message={`已选择${selectedRowKeysArr.length}项`} type="info" showIcon style={{ marginTop: '10px' }} />
      <Table
        columns={columns}
        // dataSource={list}
        dataSource={list}
        // bordered
        // table必须有key属性，可以将设置id为key
        rowKey="id"
        rowSelection={rowSelection}
        loading={loading}
        className="nestedTable"
        expandedRowRender={NestedTable}
        style={{ marginTop: '20px' }}
        scroll={Object.assign(consts.globalTableScroll, { x: 3100 })}
        pagination={{
          total,
          defaultPageSize: consts.defaultPageSize,
          pageSizeOptions: consts.pageSizeOptions,
          showSizeChanger: true,
          hideOnSinglePage: false,
          onChange: changePaginationHandle,
          onShowSizeChange: pageSizeChangeHandle,
          showTotal: () => (consts.GlobalShowTotal(total)),
        }}
      />
    </div>
  );
}
DataTable.PropTypes = {
  queryParams: PropTypes.object,
};

// export default DataTable;
export default connect()(DataTable);

