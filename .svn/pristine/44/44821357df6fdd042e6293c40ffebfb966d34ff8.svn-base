import React from 'react';
import { connect } from 'dva';
import { Table, Alert, Form, Input, Modal } from 'antd';
import PropTypes from 'prop-types';
import packageConst from './packageConst.js';
import consts from '../../config/const.js';
import { changePagination, decimalTo4, decimalTo2, formParamsFormater } from '../../utils/util.js';

const FormItem = Form.Item;

function EditCell(value, row, index, editRowIndex, form, editStatu, dataIndex) {
  const { getFieldDecorator } = form;
  return (
    editStatu && index === editRowIndex ? <FormItem>
      {getFieldDecorator(dataIndex || 'few', {
        rules: [
          {
            required: false,
            message: `Please Input!`,
          },
        ],
        initialValue: value,
      })(<Input size="small" />)}
    </FormItem> : value
  );
}

class DataTable extends React.Component {
  constructor() {
    super();
    this.state = {
      tablecolumns: this.columns,
      editStatu: false,
      editRowIndex: '',
      dataIndex: '',
      editRow: null,
    };
    this.saveHandle = this.saveHandle.bind(this);
  }
  // render method
  renderHandel(value, row, index, dataIndex) {
    return (
      EditCell(value, row, index, this.state.editRowIndex, this.props.form, this.props.modifyStatus, dataIndex)
    );
  }
  // 保存
  saveHandle() {
    Modal.confirm({
      title: 'Confirm',
      content: '确认要修改数据吗？',
      okText: '确认',
      cancelText: '取消',
      onOk: () => {
        this.props.form.validateFields((err, fieldsValue) => {
          if (err) {
            return false;
          }
          const { id } = this.state.editRow;
          Object.assign(fieldsValue, { id });
          this.props.dispatch({ type: `${packageConst.modelNameSapce}/modify`, payload: formParamsFormater(fieldsValue) });
        });
      },
      onCancel: () => {
        this.props.dispatch({ type: `${packageConst.modelNameSapce}/modifyStatusReduce`, payload: false });
      },
    });
  }
  tdWidth = { width: 80 }
  columns = [{
    title: '调拨单号',
    key: 'transferNo',
    dataIndex: 'transferNo',
    width: 200,
  },
  {
    title: '报关单号',
    dataIndex: 'declareOrderId',
    key: 'declareOrderId',
    width: 200,
    render: (value, row, index) => {

      return this.renderHandel(value, row, index, 'declareOrderId');
    },
  },
  {
    title: '出库日期',
    dataIndex: 'outtime',
    key: 'outtime',
    width: 200,
  }, {
    title: '报关日期',
    dataIndex: 'transferDate',
    key: 'transferDate',
    width: 200,
  }, {
    title: '交易期间',
    dataIndex: 'transferPeriod',
    key: 'transferPeriod',
    width: 200,
    render: (value, row, index) => {
      return this.renderHandel(value, row, index, 'transferPeriod');
    },
  }, {
    title: '入库法人主体',
    dataIndex: 'legalNameIn',
    key: 'legalNameIn',
    width: 200,
  }, {
    title: '出库法人主体',
    dataIndex: 'legalNameOut',
    key: 'legalNameOut',
    width: 240,
  }, {
    title: 'shipmentId',
    dataIndex: 'shipmentId',
    key: 'shipmentId',
    width: 200,
  },
  {
    title: 'FNSKU',
    dataIndex: 'fnsku',
    key: 'fnsku',
    width: 160,
  }, {
    title: 'UPC',
    dataIndex: 'upc',
    key: 'upc',
    width: 160,
    render: (value, row, index) => {
      return this.renderHandel(value, row, index, 'upc');
    },
  },
  {
    title: 'SKU',
    dataIndex: 'sku',
    key: 'sku',
    width: 160,
  },
  {
    title: 'SKU名称',
    dataIndex: 'skuName',
    key: 'skuName',
    width: 220,
  },
  {
    title: '总数量',
    dataIndex: 'totalCount',
    key: 'totalCount',
    width: 140,
    render: (value, row, index) => {
      return this.renderHandel(value, row, index, 'totalCount');
    },
  }, {
    title: '采购金额',
    dataIndex: 'totalMoney',
    key: 'totalMoney',
    width: 140,
    render: (value, row, index) => {
      return this.renderHandel(decimalTo2(value), row, index, 'totalMoney');
    },
  }, {
    title: '退税率',
    dataIndex: 'returnTax',
    key: 'returnTax',
    width: 140,
    // render: decimalTo2,
    render: (value, row, index) => {
      return this.renderHandel(decimalTo2(value), row, index, 'returnTax');
    },
  }, {
    title: '税率',
    dataIndex: 'taxRate',
    key: 'taxRate',
    width: 140,
  }, {
    title: '报关金额',
    dataIndex: 'declareMoney',
    key: 'declareMoney',
    width: 140,
    render: (value, row, index) => {
      return this.renderHandel(value, row, index, 'declareMoney');
    },
  }, {
    title: '币别',
    dataIndex: 'currency',
    key: 'currency',
    width: 140,
  }, {
    title: '汇率',
    dataIndex: 'exchangeRate',
    key: 'exchangeRate',
    width: 170,
    render: decimalTo4,
  }, {
    title: '项号',
    dataIndex: 'num',
    key: 'num',
    width: 150,
  }, {
    title: '销售收入',
    dataIndex: 'totalSalesAmount',
    key: 'totalSalesAmount',
    width: 150,
    render: decimalTo2,
  }, {
    title: '销售成本',
    dataIndex: 'salesCost',
    key: 'salesCost',
    width: 170,
    render: decimalTo2,
  }, {
    title: '应收出口退税',
    dataIndex: 'exportRebatesAmountCny',
    key: 'exportRebatesAmountCny',
    width: 170,
    render: decimalTo2,
  }, {
    title: '进项税转出',
    dataIndex: 'transferOutVatAmountCny',
    key: 'transferOutVatAmountCny',
    width: 150,
    render: decimalTo2,
  }, {
    title: '出库仓',
    dataIndex: 'outWarehouseName',
    key: 'outWarehouseName',
    width: 150,
  }, {
    title: '在途仓',
    dataIndex: 'passWarehouseName',
    key: 'passWarehouseName',
    width: 170,
  }, {
    title: '入库仓',
    dataIndex: 'intWarehouseName',
    key: 'intWarehouseName',
    width: 150,
  }, {
    title: '大区',
    dataIndex: 'area',
    key: 'area',
    width: 170,
  }, {
    title: '店铺',
    dataIndex: 'accountName',
    key: 'accountName',
    width: 150,
  }, {
    title: '事业部',
    dataIndex: 'enterprise',
    key: 'enterprise',
    width: 170,
  }, {
    title: '审核状态',
    dataIndex: 'auditStatusText',
    key: 'auditStatusText',
    width: 170,
  }, {
    title: '单据状态',
    dataIndex: 'status',
    key: 'status',
    width: 150,
  }, {
    title: '错误类型',
    dataIndex: 'errorMsg',
    key: 'errorMsg',
    width: 170,
  }, {
    title: '异常信息',
    dataIndex: 'exceptionMsg',
    key: 'exceptionMsg',
    width: 170,
  }, {
    title: '操作',
    dataIndex: '',
    key: '',
    fixed: 'right',
    ...this.tdWidth,
    render: (value, row, index) => {
      return (
        <span>
          <a
            onClick={() => {
              this.setState({
                editRowIndex: index,
                editStatu: true,
                editRow: row,
              });
              this.props.dispatch({ type: `${packageConst.modelNameSapce}/modifyStatusReduce`, payload: true });
            }}
          >修改</a>
          {
            this.state.editRowIndex === index && this.props.modifyStatus ? (
              <a onClick={this.saveHandle} style={{ marginLeft: '10px' }}>保存</a>
            ) : ''
          }
        </span>

      );
    },
  }];
  render() {
    const {
      dispatch,
      list,
      loading,
      selectedRowKeysArr,
      total,
      queryParams,
      form,
      } = this.props;

    const onSelectChange = (selectedRowKeys, selectedRows) => {
      dispatch({ type: `${packageConst.modelNameSapce}/selectedRowKeys`, payload: selectedRowKeys });
      dispatch({ type: `${packageConst.modelNameSapce}/selectedRows`, payload: selectedRows });
    };
    const rowSelection = {
      selectedRowKeys: selectedRowKeysArr,
      onChange: onSelectChange,
      getCheckboxProps: record => ({
        disabled: record.billDate === '本页合计' || record.billDate === '全部合计',
        name: record.name,
      }),
    };
    const changePaginationHandle = (page, pageSize) => {
      changePagination(page, pageSize, dispatch, `${packageConst.modelNameSapce}`, queryParams);
    };
    const pageSizeChangeHandle = (current, size) => {
      // dispatch({ type: `${packageConst.modelNameSapce}/tableData`, payload: { offset: 0, limit: size } });
      changePagination(current, size, dispatch, `${packageConst.modelNameSapce}`);
    };
    return (
      <div>
        <Alert message={`已选择${selectedRowKeysArr.length}项`} type="info" showIcon style={{ marginTop: '10px' }} />
        <Table
          columns={this.state.tablecolumns}
          dataSource={list}
          className="nestedTable"
          // bordered
          // table必须有key属性，可以将设置id为key
          rowKey="id"
          rowSelection={rowSelection}
          loading={loading}
          style={{ marginTop: '20px' }}
          scroll={Object.assign(consts.globalTableScroll, { x: 4800 })}
          pagination={{
            total,
            defaultPageSize: consts.defaultPageSize,
            pageSizeOptions: consts.pageSizeOptions,
            showSizeChanger: true,
            hideOnSinglePage: false,
            onChange: changePaginationHandle,
            onShowSizeChange: pageSizeChangeHandle,
            showTotal: () => (consts.GlobalShowTotal(total)),
          }}

        />
      </div>
    );
  }
}
DataTable.propTypes = {
  queryParams: PropTypes.object,
};
function mapStateToProps({ corporateTransferDetail }) {
  return corporateTransferDetail;
}
const FormWrapped = Form.create()(DataTable);
export default connect(mapStateToProps)(FormWrapped);
