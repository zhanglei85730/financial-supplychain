import React from 'react';
import { Table, Alert } from 'antd';
import packageConst from './packageConst.js';
import PropTypes from 'prop-types';
import consts from '../../config/const.js';
import { changePagination, renderFontColor, decimalTo4 } from '../../utils/util.js';
import NestedTable from './NestedTable.js';

function DataTable({
  dispatch,
  list,
  loading,
  selectedRowKeysArr,
  total,
  queryParams,
}) {
  const tdWidth = { width: 80 };
  const columns = [
    {
      title: '单据日期',
      key: 'billDate',
      dataIndex: 'billDate',
      // fixed: 'left',
      width: 160,
    },
    {
      title: '退货单号',
      dataIndex: 'returnOrderId',
      key: 'returnOrderId',
      width: 200,
    },
    {
      title: '法人主体',
      dataIndex: 'corporationName',
      key: 'corporationName',
      width: 200,
    }, {
      title: '供应商',
      dataIndex: 'supplierName',
      key: 'supplierName',
      width: 250,
    },
    {
      title: '仓库',
      dataIndex: 'warehouseName',
      key: 'warehouseName',
      width: 200,
    },
    {
      title: '汇率',
      dataIndex: 'exchangeRate',
      key: 'exchangeRate',
      ...tdWidth,
      render: decimalTo4,
    },
    {
      title: '金额',
      dataIndex: 'money',
      key: 'money',
      ...tdWidth,
      render: renderFontColor,
    }, {
      title: '税额',
      dataIndex: 'taxPriceTotal',
      key: 'taxPriceTotal',
      ...tdWidth,
      render: renderFontColor,
    },
    {
      title: '价税合计',
      dataIndex: 'taxMoneyTotal',
      key: 'taxMoneyTotal',
      width: 150,
      render: renderFontColor,
    },
    {
      title: '价税合计(本位币)',
      dataIndex: 'taxMoneyTotalCny',
      key: 'taxMoneyTotalCny',
      width: 150,
      render: renderFontColor,
    }, {
      title: '结算方式',
      dataIndex: 'methodName',
      key: 'methodName',
      width: 150,
    }, {
      title: '交货日期',
      dataIndex: 'deliveryDate',
      key: 'deliveryDate',
      width: 150,
    }, {
      title: '采购员',
      dataIndex: 'buyName',
      key: 'buyName',
      width: 150,
    }, {
      title: '事业部',
      dataIndex: 'orgName',
      key: 'orgName',
      width: 180,
    }, {
      title: '凭证状态',
      dataIndex: 'voucherStatus',
      key: 'voucherStatus',
      width: 150,
      render: consts.voucherStatusRender,

    }, {
      title: '凭证号',
      dataIndex: 'voucherNumber',
      key: 'voucherNumber',
      width: 150,
    }, {
      title: '推送金蝶时间',
      dataIndex: 'pushEasDate',
      key: 'pushEasDate',
      width: 150,
    }, {
      title: '金蝶生成凭证错误描述',
      dataIndex: 'voucherErrorMessage',
      key: 'voucherErrorMessage',
      width: 250,
    }];
  const onSelectChange = (selectedRowKeys, selectedRows) => {
    dispatch({ type: `${packageConst.modelNameSapce}/selectedRowKeys`, payload: selectedRowKeys });
    dispatch({ type: `${packageConst.modelNameSapce}/selectedRows`, payload: selectedRows });
  };
  const rowSelection = {
    selectedRowKeys: selectedRowKeysArr,
    onChange: onSelectChange,
    getCheckboxProps: record => ({
      disabled: record.billDate === '本页合计' || record.billDate === '全部合计',
      name: record.name,
    }),
  };
  const changePaginationHandle = (page, pageSize) => {
    changePagination(page, pageSize, dispatch, 'purchaseReturn', queryParams);
  };
  const pageSizeChangeHandle = (current, size) => {
    // dispatch({ type: `${packageConst.modelNameSapce}/tableData`, payload: { offset: 0, limit: size } });
    changePagination(current, size, dispatch, `${packageConst.modelNameSapce}`, queryParams);
  };
  return (
    <div>
      <Alert message={`已选择${selectedRowKeysArr.length}项`} type="info" showIcon style={{ marginTop: '10px' }} />
      <Table
        columns={columns}
        dataSource={list}
        className="nestedTable"
        // bordered
        // table必须有key属性，可以将设置id为key
        expandedRowRender={NestedTable}
        rowKey="id"
        rowSelection={rowSelection}
        loading={loading}
        style={{ marginTop: '20px' }}
        scroll={Object.assign(consts.globalTableScroll, { x: 3300 })}
        pagination={{
          total,
          defaultPageSize: consts.defaultPageSize,
          pageSizeOptions: consts.pageSizeOptions,
          showSizeChanger: true,
          hideOnSinglePage: false,
          onChange: changePaginationHandle,
          onShowSizeChange: pageSizeChangeHandle,
          showTotal: () => (consts.GlobalShowTotal(total)),
        }}
      />
    </div>
  );
}
DataTable.PropTypes = {
  queryParams: PropTypes.object,
};

export default DataTable;
